name: Service Container Example
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    # run the entire job inside a docker container based on an image
    # container:
    #   image: node:16
    # define env vars to be accessible in all steps  
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb
      MONGODB_CLUSTER_ADDRESS: 127.0.0.1:27017
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080
    # spin up a mongodb database within a service container
    services:
      mongodb:
        image: mongo
        # forward port from host:container. Remember a port identifies a process (program) running on a machine.
        # in order for other programs within your runner (e.g. your tests) to communicate with mongoDB in the service container, we must map a port from the runner to the DB in the service container.
        # What actually happens is the docker daemon on the host (runner) will run a network proxy program at port 27017 to listen to traffic and forward it to port 27017 on the service container (which is running the DB at that port)
        # E.g. unit test makes request to DB at port 27017 => forwarded to port 27017 in the service container and handled there.
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        # env vars can be accessed in 2 different ways:
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"      
          echo "${{ env.PORT }}"