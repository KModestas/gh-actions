name: S3 Docker Deployment Demo
on:
  push:
    branches:
      - main
jobs:
  # this job just runs a linter and logs the output to the console, it runs in parallel with the other jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cache dependencies
        id: cache-deps
        # this step is using our custom composite action.
        # NOTE: the part is relative to the entire root of your project. Also action.yaml can be ommited from the path as its assumed by default
        uses: ./.github/actions/cached-deps
        with:
          # pass an input to our custom composite action to tell it not to cache dependencies (arbitrary use case)
          caching: 'false'
        # this step logs the output from our composite action
      - name: Output information
        run: echo "Cache used? ${{ steps.cache-deps.outputs.used-cache }}"
      - name: Lint code
        # run linter on your code which checks your code for stylistic and programming errors and logs them to the console
        run: npm run lint
  # this job starts a chain which the other jobs are part of:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # our composite action is reused here
      - name: Load & cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        # only run this step if previous run-tests step failed:
        if: failure() && steps.run-tests.outcome == 'failure'
        # upload test report generated by vitest as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # our composite action is reused here
      - name: Load & cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Build website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # name is a unique id that identifies the artifact 
          name: dist-files
          # get the dist folder from the root directory and upload it as an artifact
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # download the artifacts (static build files) from the previous build step
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          # download the dist directory and place it in the current folder
          path: ./dist
      - name: Output contents
        run: ls
      - name: Deploy site
        id: deploy
        uses: ./.github/actions/deploy-s3-docker
        # When invoking the Docker container for the action, GitHub Actions uses the Docker -e flag to set environment variables, effectively passing them to the container
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          bucket: gha-security-hosting-demo
          dist-folder: ./dist
      - name: Output information
        run: |
          echo "Live URL: ${{ steps.deploy.outputs.website-url }}"
